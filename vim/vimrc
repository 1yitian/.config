vim9script
const start = reltime()
### Options
set encoding=utf-8
syntax enable
filetype on
filetype plugin on
filetype plugin indent on
set clipboard=unnamedplus
set scrolloff=5
set autoread
set nofoldenable
set list
set listchars=tab:>-,trail:-
if has('persistent_undo')
	set undofile
	set undolevels=128
endif
### Indent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set smartindent

###Vim UI
# editor
set number
set relativenumber
set cursorline
set showmode
set showcmd
set ruler
set nowrap
# search
set hlsearch
set incsearch
# cmdline
set wildmenu
# scheme
colorscheme bonjour
# mouse
if has('mouse')
	set mouse=a
endif
# gui plan to removed
if has('gui_running')
	set guioptions-=m  #menu bar
	set guioptions-=T  #toolbar
	set guioptions-=r  #scrollbar
endif

### Mappings
# Colemak
noremap	h	h
noremap	H	H
noremap	n	j
noremap	N	J
noremap	e	k
noremap	E	K
noremap	i	l
noremap	I	L
noremap	k	n
noremap	K	N
noremap	l	u
noremap	L	<C-r>
noremap	u	i
noremap	U	I
noremap	f	e
noremap	<C-w>h   <C-w>h
noremap	<C-w>n   <C-w>j
noremap	<C-w>e   <C-w>k
noremap	<C-w>i   <C-w>l
noremap	<C-w>H   <C-w>H
noremap	<C-w>N   <C-w>J
noremap	<C-w>E   <C-w>K
noremap	<C-w>I   <C-w>L
# Custom
nmap	<left>	:vertical resize+1<CR>  
nmap	<down>	:resize+1<CR>  
nmap	<up>	:resize-1<CR>  
nmap	<right>	:vertical resize-1<CR>  
map	 tt  :tabnew<CR>
map	 ti  :tabnext<CR>
map	 tn  :tabNext<CR>
map	 <leader>q   :q<CR>
map	 <leader>Q   :q!<CR>

map	 <leader>s   :set spell!<CR>
map	 <leader>h   :nohlsearch<CR>

packadd comment
packadd editorconfig
packadd nohlsearch
# augroup RestoreCursor
export def RestoreCursor()
	if num
	var num = line("'\"")
	if num >= 1 && num <= line("$") && &filetype !~# 'commit' && index(['xxd', 'gitrebase'], &filetype) == -1
		execute "normal! g`\""
	endif
enddef

autocmd_add([{
	replace: true,
	group: 'RestoreCursor',
	event: 'BufReadPost',
	cmd: 'call RestoreCursor()'
}])
# autocmd_add({group: 'RestoreCursor',
# 			event: 'BufReadPost',
# 			pattern: '*',
# 			cmd = {
# 				}
# 			})
g:vimrctime = reltimestr(reltime(start)) .. 's'
